import { ArrayFormatter, CustomErrorMessageFormatter, NumericFormatter, ObjectFormatter, StringFormatter, TypeFormatter } from './formatters';
// based on https://github.com/segmentio/action-destinations/tree/main/packages/ajv-human-errors
export class ErrorHumanizer {
    constructor() {
        this.formatters = [
            new ArrayFormatter(),
            new CustomErrorMessageFormatter(),
            new NumericFormatter(),
            new ObjectFormatter(),
            new StringFormatter(),
            new TypeFormatter()
        ];
    }
    humanizeErrors(errors) {
        return errors.map(this.humanizeError.bind(this));
    }
    humanizeError(error) {
        return {
            originalError: error,
            ...this.humanizeErrorMessage(error)
        };
    }
    humanizeErrorMessage(error) {
        var _a, _b;
        const locationMessageParts = this.formatLocation(error);
        const locationMessage = locationMessageParts
            .map((part) => part.text)
            .join(' ');
        const message = (_b = (_a = this.formatters
            .find((formatter) => formatter.canProcessKeyword(error.keyword))) === null || _a === void 0 ? void 0 : _a.format(error)) !== null && _b !== void 0 ? _b : error.message;
        return {
            message: `${locationMessage}: ${message}`,
            messageParts: [
                {
                    text: message
                }
            ],
            locationParts: locationMessageParts
        };
    }
    formatLocation(error) {
        return [
            {
                text: 'Error at'
            },
            {
                text: error.instancePath === '' ? 'the schema root' : error.instancePath,
                jsonPointer: error.instancePath
            }
        ];
    }
}
//# sourceMappingURL=ErrorHumanizer.js.map