import { BaseFormatter } from './BaseFormatter';
import { WordingHelper } from './WordingHelper';
export class ArrayFormatter extends BaseFormatter {
    constructor() {
        super(...arguments);
        this.supportedKeywords = new Set([
            'maxItems',
            'minItems',
            'uniqueItems'
        ]);
    }
    format(error) {
        const target = WordingHelper.humanizeTarget(error.instancePath);
        switch (error.keyword) {
            case 'minItems':
            case 'maxItems':
                return `${target} must have ${error.params.limit} or ${WordingHelper.humanizeComparison(error.keyword)} items`;
            case 'uniqueItems': {
                const { i, j } = error.params;
                return `${target} must have unique values, but the elements at indexes ${j} and ${i} are the same`;
            }
        }
    }
}
//# sourceMappingURL=ArrayFormatter.js.map