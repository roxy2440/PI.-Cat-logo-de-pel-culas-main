import { BaseFormatter } from './BaseFormatter';
import { WordingHelper } from './WordingHelper';
export class ObjectFormatter extends BaseFormatter {
    constructor() {
        super(...arguments);
        this.supportedKeywords = new Set([
            'additionalProperties',
            'required',
            'minProperties',
            'maxProperties'
        ]);
    }
    format(error) {
        switch (error.keyword) {
            case 'additionalProperties': {
                const props = error.params.additionalProperty;
                return Array.isArray(props)
                    ? `The properties ${WordingHelper.humanizeList(props.map((prop) => `\`${prop}\``))} are unexpected`
                    : `The property \`${props}\` is unexpected`;
            }
            case 'required':
                return `The property \`${error.params.missingProperty}\` is required`;
            case 'minProperties':
            case 'maxProperties': {
                return `${WordingHelper.humanizeTarget(error.instancePath)} must have ${error.params.limit} or ${WordingHelper.humanizeComparison(error.keyword)} properties`;
            }
        }
    }
}
//# sourceMappingURL=ObjectFormatter.js.map