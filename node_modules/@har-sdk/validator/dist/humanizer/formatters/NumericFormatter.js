import { BaseFormatter } from './BaseFormatter';
import { WordingHelper } from './WordingHelper';
export class NumericFormatter extends BaseFormatter {
    constructor() {
        super(...arguments);
        this.supportedKeywords = new Set([
            'minimum',
            'maximum',
            'exclusiveMinimum',
            'exclusiveMaximum'
        ]);
    }
    format(error) {
        const { keyword, params } = error;
        switch (error.keyword) {
            case 'minimum':
            case 'maximum':
            case 'exclusiveMinimum':
            case 'exclusiveMaximum': {
                const direction = keyword.toLowerCase().includes('minimum')
                    ? 'greater'
                    : 'less';
                const inclusive = !keyword.startsWith('exclusive');
                return `${WordingHelper.humanizeTarget(error.instancePath)} must have a value${inclusive ? ' equal to or' : ''} ${direction} than ${params.limit}`;
            }
        }
    }
}
//# sourceMappingURL=NumericFormatter.js.map