import { ErrorCondenser } from './ErrorCondenser';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import ajvErrors from 'ajv-errors';
export class BaseValidator {
    constructor(schemas) {
        this.ajv = new Ajv({
            allErrors: true,
            strict: false
        });
        addFormats(this.ajv);
        ajvErrors(this.ajv);
        schemas.forEach((s) => this.verifySchema(s));
        this.ajv.addSchema(schemas);
    }
    async verify(document) {
        const schemaId = this.getSchemaId(document);
        const validateFn = schemaId
            ? this.ajv.getSchema(schemaId)
            : null;
        if (!validateFn) {
            throw new Error('Unsupported or invalid specification version');
        }
        try {
            await validateFn(document);
            return [];
        }
        catch (err) {
            if (!(err instanceof Ajv.ValidationError)) {
                throw err;
            }
            return new ErrorCondenser(err.errors).condense();
        }
    }
    verifySchema(schema) {
        if (!schema.$async) {
            throw Error('Invalid schema: the schema should support an asynchronous validation. Set the "$async" parameter in the schema. Look at https://ajv.js.org/guide/async-validation.html#asynchronous-validation for more details');
        }
    }
}
//# sourceMappingURL=BaseValidator.js.map